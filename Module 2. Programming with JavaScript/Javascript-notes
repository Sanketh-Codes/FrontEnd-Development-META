1. Javascript is a programming language which is used to attain the feature of interaction. (user and the webpage)
2. Javascript is the only web development language even there is a typescript but typescript is compiled down to javascript.
3. Javascript can be used on client side(For interactions in front end) and also server side(backend in Node js).
4. We can run the js code in both the ide(vscode using gurunner extension) or even in the browser developer tools (console)
    ----> We can style the content in browser tag also.
    example --> console.log('Hello world'); --> this statemnt just prints the hello world text
            --> console.log('%cHello world','font-size:40px;color:red') --> this statement prints the hello world with size 40px and color red.

5. Datatypes in JavaScript
    a)String ---> var name="sanketh" or var name = 'sanketh'
    b)Number --> var a = 123
    c)Boolean
    d)Null- absence of value
    e)Unassigned -- value is unassigned
    f)BigInt
    g)Symbol -- used as an identifier

6. there are many operaors but amongst them he most confusing for me atleast is == and ===
    == is to check if the LHS AND RHS values are same and return true or false  ex - 10 == "10" returns true
    === is to check if the LHS AND RHS value and also type is same ex- 10 === "10" returns false as LHS is of type Number and RHS is type string
    != and also !== present and same rules as above apply

------------------------------------Functions---------------------------------
1.syntax --> function function_name(function parameters){
    //body of the function i.e., code of the function that is to be executed ones called.
}
function_name(arguments)----> This is the function call
    **NOTE** ---> Here if we want the size of string then use str.length 
        eg - var str = "SAI BABA";
                To get the str length use str.length

---------------------------------Objects-------------------------------------------
1. Object ---> Collection of related properties.
    syntax ---> var car = {};----> This creates an empty object
                car.speed = 132;
                car.color = "red";
                car.cost = 800000;
            Here speed,color,cost are the properties of the car(object)

    The above example will be as 
        var car = {
            speed : 132,
            color : "red",
            cost  : 800000
        }

    We can always add the new properties by using . operator
        ex - car.isAcAvaialble = true
    We can also update the previously created objects 
        ex - car.color = "black";
        console.log(car) ----> {speed : 132,color : "black",cost : 800000,isAvAvailable : true}
    
    There is another way of creating the property for the object----> Instead of . operator as we seen in above example we can use [] 
        ex - > car['type'] = "Petrol"
        console.log(car)----> {speed : 132,color : "black",cost : 800000,isAvAvailable : true,type:petrol}
    

    **NOTE** --> We can also add function to the object.
                car.applyBreak() = function(){
                    console.log("Break Applied");
                }
                This function of the object is called method and can only be accessed using the object.functionname() i.e., In our case car.applyBreak();
    **NOTE** ---> Advantages of useing [] instead of .
        1) We can add the space in the property name using [] but this is not possible with .
            ex - > car."brand ambassador" = "Virat"----> This throws an error
                   car["brand ambassador"] = "Virat" --> This is valid
                   console.log(car) ---> {speed : 132,color : "black",cost : 800000,isAvAvailable : true,type:petrol,brand ambassador : "virat"}
        2) We can also assign the property names with numbers how ever that doesnt make any sense.
                ex - > car["2021"] = "new model"
        3) We can perform the evaluation of expressions.
                ex - > var carKeys = ["speed","color","cost","isAvAvailable","type","brand ambassador","2021"]
                        var car = {
                            speed : 132,
                            color : "black",
                            cost : 800000,
                            isAvAvailable : true,
                            type:petrol,
                            brand ambassador : "virat"
                        }
                        console.log(car[carKeys[5]]) ----> evaluates to car["brand ambassador"] ---> evaluates to virat

-------------------Math cheat sheet-------------------------------------------------
1. ceil()--> output is inetegr part value + 1---> ex==> console.log(Math.ceil(4.1))----> output is 5.
2. floor()--> output will be the inetger part value ---> ex==> console.log(Math.floor(4.9)) ---> output is 4.
3. round() --> integer part value + 1 if decimal values is from 5 to 9 --> ex==> console.log(Math.round(4.5)) -- > output is 5.
                integer part value if decial value is from 0 to 4 --> console.log(Math.round(4.4)) -- > output is 4.
4.trunc() ---> output is just the integer part value ---> ex==> console.log(Math.trunc(4.9)) --> output is 4

----------------------Bugs and Errors----------------------------------------------------
1.Bugs ---> simply the piece of code which runs unexpectedly producing the results whoch are not expected but the program execution does not stop
2.Errors ---> Code stops executing and throws errors and the lines below that code will not execute.
        Types of errors 
        a)Reference error--> This is thrown when the variable is used which is not declare anywhere.    
        b)Type error --> Thrown when some predefined methods are being used on the types for which the method is not defined ex--> "Hello".pop()
        c)Syntax error --> This is thrown when there is some kind of syntax problem and syntax error cant be handled using try catch
        d)range error --> Thrown when using some predefines function and passing the argument which does not exist.
            ex--> (10).toString(2)---> This converts the number 10 to base 2 that is to binary form //1010
                (10).toString(18)---> converts 10 to base 8//12
                (10).toString(36)--> converts to base 36 and 36 is the last base.
                (10).toString(100)--> Throws range error

3.Error Handling
    This functionaity can be obtained using the try catch block
    ex - > console.log(a+b);
           console.log("This code never executes");
        The above program throws error at line 1 and never execute line 2
        In order to encounter this we need to use something known as try catch blocks.
        ex--> try{
            console.log(a+b);
        }
        catch(error){
            console.log("This code will execute")
        }
        console.log("This code will also execute");

    **NOTE** --> throw is used to manually throw the error  
        ex--> try{
            throw new ReferenceError(); //here ReferenceError is a predefined error constructor
        }
        catch(error){
            console.log(error); //This will print a reference error onto screen 
        }

-------------------Programming Paradigms-------------------------------------

In Javascript there are two types of programming paradigms--> Nothing but the way we approach the program and write the code.
1) ========================Functional programming(FP)============================

a)In functional programming we keep data and functioanlity seperate and access the function with the data only when needed.
b)In FP function return the value after executing the function and that value can be used anywhere in the program   

    ex--> var data = 5;
          var mul = 3;
          function calcu(a,b){
            return a*b;
          }
          var val = calcu(data,mul);
          console.log(val);//15

)=========================Object Oriented Programming(OOP)=======================

a)In OOP we group data and functionality as properties and objects.
    ex--> The above FP example in OOP will be as
            var my_obj = {
                data:5,
                mul:3,
                cal:function(a,b){
                    return a*b;
                }
            }
            var val = my_obj.cal(my_obj.data,my_obj.mul);
            console.log(val);//15

Back to Funactional programming important concepts
    1) Javascript functions are first-class functions because
        a) Pass to other functions
        b)save in a variable 
        c) return from other functions

        ex--> function setName(){
            return "Hello";
        }
        var iWillSet;
        iWillSet=setName;
        console.log(iWillSet());
    
    2) Javascript functions are pure functions because it always return the same result when passed with same arguments.

let const and var differences
----> var ==> 1) variables declared using var can be used even before declaring.
              2) variables declared using var can be re-declare. 
              3) variables declared using var can be re-assigned.

----> let ==> 1)  variables declared using let cannot be used before declaring.
              2) variables declared using let cannot be re-declared.
              3) variables declared using let can be re-assigned.

----> const ==> 1) variables declared using const cannot be used before declaring.
                2) variables declared using const cannot be re-declared.
                3) variables declared using const cannot be re-assigned.
            
NoTE-----> let and const are block scope variables.

----------------------Destructuring---------------------------
1) Destructuring means storing the item from the object or array into variables.
    ex---> Math object has the built in property known as PI whose value is 3.14.....
            Now we can store that value from Math object into a program variable.
            let {PI} = Math.PI;

-------------Differences between for-in loop and for of  loop

NOTE--> Refer to hands-on file forOfLoop.js to understand the For of loop implementation of arrays and objects


    1) for in loop will iterate on both the prototype of the object and the object 
    2) for of loop using the Object.keys(object_name) will only iterate over the object itself
         Note---> See the hands-on file diffForinForof.js

---------------template literal--------------------
1) this is the use of backtiks(``) instead of regular string ('' and "")
2) Used in the console.log statements when need to evaluate any result insead of always using + like console.log('The addition of a and b is'+(a+b));
    ex-->  let a = 1;
            let b=2; 
           console.log(`The sum of a and b is ${a+b}`); instead of console.log('The addition of a and b is'+(a+b));
3)And also we can write the string inside  `` in multiple lines which will not be possible using the '' and ""
4)using the backticks(``) we can have ' and " in our string
  ex--> let str = `Hi!, he doesn't know that I("sanekth") is coming to the office`  This will not throw any error

  Note---> please check the literal.js for more hands-on implementation 


------------------Data Structures-----------------------------
1) Data structures is the way of organising (storing) the data.
In javascript we have 4 Data structures----> arrays, Objects, sets and maps.
    We had alredy covered arrays and objects enough lets see other two
    a) Maps ---> We store as a key value pair same as object but the difference is in object the key should be only of type string
                Whereas in maps key can be of any type. And maps are iterable wherea as objects are not(iterable using the key)
            
        Note ===> See the implementation in hands-on map file mapIllus.js

    b)    Arrays have 3 importnat methods
    a)forEach()
        ---> loops over the array for each and every element.
    b)filter()
        ---> iterate over all the elements and return the elements which matches the condition written 
    c)map()
        ---> maps each array item to other array based on  the calculation mentioned.

Note====> See the above implementations in the hads-on file arrayMethodsImp.js

    c) Set ----> used to store the unique items
        ex--> var arr = [10,10,20,30,20];
                var my_set = new Set(arr);
                console.log(my_set); // {10,20,30}

---------Rest and Spread operator-----------------------------
In javascript ES6 we can use spread and rest operators on array objects.
    a) Spread ---> used in the function call denoted by ...
    b) rest ----> used in the function parameter and should always be the last parameter in the function declaration.

Note===> See the implementation of rest and spread operator in restSpread.js file

----------Javascript Modules-------------------
Module---> standalone piece of code that can be reused again and again.
            standalone means you can add, remove or replace that unit of code.

DOM Manipulation ----> used to update the web browser content using the js code in browser console.
    NOte ==> see the code implementation and the browser wndow in the image DOM-manipulation.

Process -->
    1)First when we type in the URL to request some content from the server the server responds by providing the HTML code and in the browswer HTML code will be saved and the content loads on the browser window.
    2)Then browser will create the DOM based on the HTML code received from the server as the document.
    3)It is that DOM document which developers used to interact with and make the changes.
    4)The changes will be only restricted to the local browser content and will not update the content in the server
    5)The changes will be lost as soon as we refresh the browser as the DOM will again be crated based on the HTMLcode received from server.

-------Adding eventListener-------------------
NOTE---> see the hands-on file eventListener.html and eventListener.js for the full understanding and implementation.

-----Steps of adding the HTML element using the document object and adding the eventListener-------------------
    step1===> First we need to add the element like h1,h2 or p or any other using the createElement function which takes the element as parameter and assign it to any variable.
                var h1 = document.createElement('h1')
    step2===> Then we need to add if we need to add any attributes using setAttribute('attributename','attributevalue')
                h1.setAttribute('onClick','function_name')
    step3===> Then we need to add the body innterText to the document object
                document.body.innerText = ''
    step4===> Then append our created element to the document
                document.body.append(h1)

    example--> To create the input type text and display what is written in input when entered and clicked enter
    var h1 = document.createElement('h1');
    h1.innerText = 'Please enter your name'
    var input = document.createElement('input')
    input.setAtribute('type','text')
    document.body.innerText = ''
    document.body.append(h1)
    document.body.append(input)
    //adding the event listener to input and changing the h1 text to the text written in input field
    input.addEvenListener('change',function changing(){
        h1.innerHTML = input.value
    })

-------------------Testing-------------------------------------------
1) Testing is used inorder to check the soure code is working as expected.
2) We generally attain this by writing the unit tests.
example---> function concatString(str1,str2){
    return str1+str2;
}
For the above code the unitTest should be as follows
    expect(concatString("abc","def")).toBe("abcdef");----> This check the taking the parameters inside the function in expect and check if the return result from source code is matching with the result of unitTest written in toBe.

3) Types of Testing
    a) E2E testing(End 2 End) ----> Here the entire web application needs to be open in the browser and the person checks the app exactly thinking in the perscpective of the end user before launch.
        --> The tester may not be the developer here.
        --> Very slow and time consuming.
    b) Integrated testing ---> Here the developer tests the different modules and tests if they are working as expected when combined together.
        --> Faster and cost effective than e2e testing.
    c) Unit testing ---> Here the developer tests the isolated units for example in js they are functions
        ---> Fastest and cheap.

4) Here we are learning the JEST framework developed by META for writing the tests
5) Advatanges of using JEST are 
    a) code coverage---> Tells how much % of the code is being tested. The more the code covergage the less the chance of unidentified bugs.
    b) Mocking ---> Used to reduce the time of wait when the UI developer needs data from he backend to test the functionality
    c) Snapshot testing

6) Steps on how to write the Tests
    step1--> Verify if you have node and npm install by the command node --version and npm --version.
    step2--> write the function and the behaviour you want as the source code --> addingTestCode.js --> function addingCode.
    step3--> Inorder to test we need to have jest installed.
    step4--> Before installing JEST run the command npm init. This creates the package.json file
    step5--> Then run the command npm install --save-dev jest. This will install jest as the dev dependencies inside the package.json.
    step6--> Create the test file addingTestCode.test.js.
    step7--> Open the package.json file and near the test line number 7 change the text and assign test to jest.
    step8--> Run the command npm run test and this will run test and see if the tests failing or passing.

Note--> Fo each line of test what it does see the code files addingTestCode.js and addingTestCode.test.js